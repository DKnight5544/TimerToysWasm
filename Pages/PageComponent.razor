
@using TimerToysShared.Model
@using TimerToysWasm.Model

@inject HttpClient Http
@inject NavigationManager NavManager

<div style="display:@displayStyle;">
    <input class="page-name"
           @bind="pageName"
           @onclick="PageName_onclick"
           disabled="@IsDisabled"
           onfocus="this.select();" />

    <button class="page-button" @onclick="Button1Pressed">@button1Text</button>

    <button class="page-button" 
            @onclick="Button2Pressed" 
            disabled="@IsDisabled" 
            style="background-color: @BackGroundColor; ">@button2Text</button>

    <button class="page-button" @onclick="Button3Pressed" style="display:@NotReadOnlyMode">READ ONLY</button>
    <span class="read-only-msg" style="display:@ReadOnlyMode">Read Only View</span>
</div>

<div></div>

@code {

    private Timer myTimer = new Timer();
    private string button1Text;
    private string button2Text;
    private UpdateTarget updateTarget;
    private TimerToyComponent[] timerComponents;
    private string displayStyle = "none";



    private bool IsDisabled
    {
        get
        {
            return string.IsNullOrWhiteSpace(myTimer.TimerKey);
        }
    }

    private string BackGroundColor
    {
        get
        {
            return (IsDisabled) ? "#E8E8E8" : "transparent";
        }
    }

    private string ReadOnlyMode
    {
        get { return IsDisabled ? "inline" : "none"; }
    }

    private string NotReadOnlyMode
    {
        get { return IsDisabled ? "none" : "inline"; }
    }

    public string pageName { get; set; }


    private void Button1Pressed()
    {
        if (updateTarget == UpdateTarget.PageName)
        {
            if (string.IsNullOrWhiteSpace(pageName))
            {
                //cancel
                DisplayPage();
            }
            else
            {
                //save
                myTimer.PageName = pageName;
                Http.PostAsJsonAsync("UpdatePageName", myTimer);
                DisplayPage();
            }
        }
        else
        {
            //Create New Page
            NavManager.NavigateTo("", forceLoad: true);
        }


    }

    private async void Button2Pressed()
    {
        if (updateTarget == UpdateTarget.PageName)
        {
            //cancel
            DisplayPage();
        }
        else
        {
            //Create New Timer
            //NavManager.NavigateTo(string.Format("/{0}", myTimer.PageKey), forceLoad: true);
            if (!string.IsNullOrWhiteSpace(myTimer.TimerKey))
            {
                var response = await Http.PostAsJsonAsync("AddTimer", myTimer);
                Timer tmr = await response.Content.ReadFromJsonAsync<Timer>();
                timerComponents.First(t => t.IsTimerSet == false).SetTimer(tmr);
            }
        }


    }

    private void Button3Pressed()
    {
        //goto read only page
        string readOnlyPage = string.Format("/{0}",myTimer.PageKey.Substring(0,28));
        NavManager.NavigateTo(readOnlyPage, forceLoad: true);
    }

    private void PageName_onclick()
    {
        updateTarget = UpdateTarget.PageName;
        button1Text = "SAVE";
        button2Text = "CANCEL";
    }

    private void DisplayPage()
    {
        pageName = myTimer.PageName;
        updateTarget = UpdateTarget.PageAddButtons;
        button1Text = "NEW PAGE";
        button2Text = "ADD TIMER";
        displayStyle = "block";
        StateHasChanged();
    }

    public void SetTimerArray(TimerToyComponent[] timerComponents)
    {
        this.timerComponents = timerComponents;
        myTimer = timerComponents[0].myTimer;
        DisplayPage();
    }

}
