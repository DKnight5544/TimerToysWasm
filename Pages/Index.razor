@page "/"
@page "/{id}"

@using TimerToysShared.Model
@using System.Collections.Generic
@inject HttpClient Http
@inject NavigationManager NavManager


@{

    <PageComponent @ref="pageComp"></PageComponent>


    <div>
        @for (int idx = 0; idx < 50; idx++)
        {
            int i2 = idx;
            <TimerToyComponent @ref=tta[i2] />
        }
    </div>


    if (timers == null)
    {
        <h4><em>Still Loading . . .</em></h4>
    }
    else
    {
        if (string.IsNullOrWhiteSpace(id))
        {
            NavManager.NavigateTo(string.Format("/{0}", timers[0].PageKey));
        }

        int idx = 0;
        foreach (Timer t in timers.OrderBy(t => t.SortIndex))
        {
            tta[idx].SetTimer(t);
            idx++;
        }

        pageComp.SetTimerArray(tta);

        if (ticker == null)
        {
            // don't create more than one time.
            // adding a new page seems to do that. If you are not
            // carefull you can have several tickers active.
            ticker = new System.Threading.Timer(Tick, null, 1000, 1000);
        }

        <div style="padding-top:20px; clear:both;">
            <a href="https://paypal.me/wigiwiz/" target="_blank" class="donate">PLEASE DONATE</a>
        </div>

    }

}


@code {

    [Parameter]
    public string id { get; set; }

    private Timer[] timers;

    private System.Threading.Timer ticker;


    private PageComponent pageComp = new PageComponent();
    private TimerToyComponent[] tta = new TimerToyComponent[50];

    protected override async Task OnInitializedAsync()
    {

        if (string.IsNullOrWhiteSpace(id))
        {
            timers = await Http.GetFromJsonAsync<Timer[]>("GetNewPage");
        }
        else
        {
            timers = await Http.GetFromJsonAsync<Timer[]>(string.Format("GetAllByPage/{0}", id));
        }

    }

    private void Tick(Object stateInfo)
    {
        foreach (TimerToyComponent t in tta)
        {
            if (t.IsTimerSet) t.Tick();
        }
    }
}
