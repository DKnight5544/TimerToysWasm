
@using TimerToysShared.Model

@inject HttpClient Http

<div class="timer-container " style="display:@display;">
    <input class="timer-name" @bind="timerName" onfocus="this.select();" />

    <input class="elapsed-time"
           @bind="elapsedTime"
           @onclick="PauseTimer"
           @onblur="ResumeTimer" 
           onfocus="this.select()" 
           />

    <button class="toggle-timer-button" @onclick="ToggleTimer">@buttonText </button>

</div>

@code {

    private Timer myTimer = new Timer();
    private string display = "none";
    private bool isPaused;
    private string buttonText;

    private string timerName
    {
        get { return myTimer.TimerDescription; }
        set
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                StateHasChanged();
            }
            else
            {
                myTimer.TimerDescription = value;
                Http.PostAsJsonAsync("UpdateTimerName", myTimer);
            }
        }
    }

    private string elapsedTime
    {
        get
        {
            int sec = myTimer.ElapsedTime;
            int hrs = sec / 3600;

            sec -= (hrs * 3600);

            int min = sec / 60;

            sec -= (min * 60);

            return string.Format("{0:00}:{1:00}:{2:00}", hrs, min, sec);

        }

        set
        {
            if (string.IsNullOrWhiteSpace(value)) return;

            var arr = value.Split(":");
            var seconds = 0;

            if (arr.Length > 3) return;

            if (arr.Length == 1)
            {
                seconds = getSeconds(arr[0], 1);
            }

            if (arr.Length == 2)
            {
                seconds = getSeconds(arr[0], 60);
                seconds += getSeconds(arr[1], 1);
            }

            if (arr.Length == 3)
            {
                seconds = getSeconds(arr[0], 3600);
                seconds += getSeconds(arr[1], 60);
                seconds += getSeconds(arr[2], 1);
            }

            AdjustTimer(seconds);
            ResumeTimer();

        }
    }

    private int getSeconds(string seg, int offset)
    {
        int segInt = 0;
        if (int.TryParse(seg, out segInt)) return segInt * offset;
        return 0;
    }

    private void PauseTimer() { isPaused = true; }
    private void ResumeTimer() { isPaused = false; }

    private async void ToggleTimer()
    {
        string apiName = string.Format("ToggleTimer/{0}", myTimer.TimerKey);
        Timer tmr = await Http.GetFromJsonAsync<Timer>(apiName);
        SetTimer(tmr);
    }

    private async void AdjustTimer(int seconds)
    {
        myTimer.ElapsedTime = seconds;
        var response = await Http.PostAsJsonAsync("AdjustTimer", myTimer);
        Timer tmr = await response.Content.ReadFromJsonAsync<Timer>();
        SetTimer(tmr);
    }

    public void SetTimer(Timer tmr)
    {
        myTimer = tmr;
        timerName = tmr.TimerDescription;
        display = "block";
        buttonText = (tmr.IsRunning) ? "OFF" : "ON";
        StateHasChanged();
    }

    public void Tick()
    {
        if (myTimer.IsRunning)
        {
            myTimer.ElapsedTime++;
            if(!isPaused) StateHasChanged();
        }
    }

    public void ButtonPressed()
    {

        if (buttonText == "OFF" || buttonText == "ON")
        {
            ToggleTimer();
        }

    }

}
