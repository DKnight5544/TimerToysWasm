
@using TimerToysShared.Model
@using TimerToysWasm.Model

@inject HttpClient Http

<div class="timer-container " style="display:@display;">
    <input class="timer-name"
           @bind="timerName"
           @onclick="TimerName_onclick"
           tabindex="-1"
           onfocus="this.select();" />

    <input class="elapsed-time"
           @bind="elapsedTimeString"
           @onclick="ElapsedTime_onclick"
           tabindex="-1"
           onfocus="this.select()" />

    <button class="timer-button btn1" @onclick="Button1Pressed">@button1Text</button>
    <button class="timer-button btn2" @onclick="Button2Pressed">@button2Text</button>
</div>

@code {

    private Timer myTimer = new Timer();
    private string display = "none";
    private bool isPaused;
    private string button1Text;
    private string button2Text;
    private UpdateTarget updateTarget;

    private string timerName { get; set; }
    private string elapsedTimeString { get; set; }

    private string stringifyElapsedTime(int seconds)
    {

        int sec = seconds;
        int hrs = sec / 3600;

        sec -= (hrs * 3600);

        int min = sec / 60;

        sec -= (min * 60);

        return string.Format("{0:00}:{1:00}:{2:00}", hrs, min, sec);

    }

    private void TimerName_onclick()
    {
        updateTarget = UpdateTarget.TimerName;
        button1Text = "SAVE";
        button2Text = "CANCEL";
    }

    private void ElapsedTime_onclick()
    {
        PauseTimer();
        updateTarget = UpdateTarget.ElapsedTime;
        button1Text = "SAVE";
        button2Text = "CANCEL";
    }

    private void PauseTimer() { isPaused = true; }

    private void ResumeTimer() { isPaused = false; }

    private async void ToggleTimer()
    {
        string apiName = string.Format("ToggleTimer/{0}", myTimer.TimerKey);
        Timer tmr = await Http.GetFromJsonAsync<Timer>(apiName);
        SetTimer(tmr);
    }

    private async void AdjustTimer(int seconds)
    {
        myTimer.ElapsedTime = seconds;
        var response = await Http.PostAsJsonAsync("AdjustTimer", myTimer);
        Timer tmr = await response.Content.ReadFromJsonAsync<Timer>();
        SetTimer(tmr);
    }

    private void Button1Pressed()
    {

        if (updateTarget == UpdateTarget.TimerStopStart)
        {
            //button 1 is STOP
            if (myTimer.IsRunning) ToggleTimer();

        }

        else if (updateTarget == UpdateTarget.ElapsedTime)
        {
            if (string.IsNullOrWhiteSpace(elapsedTimeString))
            {
                SetTimer(myTimer);
            }

            int? seconds = getSeconds(elapsedTimeString);

            if (seconds.HasValue)
            {
                AdjustTimer(seconds.Value);
            }
            else
            {
                SetTimer(myTimer);
            }

        }

        else if (updateTarget == UpdateTarget.TimerName)
        {
            if (!string.IsNullOrWhiteSpace(timerName))
            {
                myTimer.TimerDescription = timerName;
                Http.PostAsJsonAsync("UpdateTimerName", myTimer);
            }

            SetTimer(myTimer);

        }

        return;

    }

    private void Button2Pressed()
    {

        if (updateTarget == UpdateTarget.TimerStopStart)
        {
            //button 2 is START
            if (!myTimer.IsRunning) ToggleTimer();
        }

        if (updateTarget == UpdateTarget.ElapsedTime)
        {
            SetTimer(myTimer);
        }

        else if (updateTarget == UpdateTarget.TimerName)
        {
            SetTimer(myTimer);
        }

    }

    private int? getSeconds(string secondsString)
    {
        int? seconds = new int?();

        secondsString = secondsString.Replace(".", ":");
        var arr = secondsString.Split(":");

        if (arr.Length > 3)
        {
            return seconds;
        }

        if (arr.Length == 1)
        {
            seconds = getSeconds(arr[0], 1);
        }

        if (arr.Length == 2)
        {
            seconds = getSeconds(arr[0], 60);
            seconds += getSeconds(arr[1], 1);
        }

        if (arr.Length == 3)
        {
            seconds = getSeconds(arr[0], 3600);
            seconds += getSeconds(arr[1], 60);
            seconds += getSeconds(arr[2], 1);
        }

        return seconds;
    }

    private int getSeconds(string seg, int offset)
    {
        int segInt = 0;
        if (int.TryParse(seg, out segInt)) return segInt * offset;
        return 0;
    }

    public void SetTimer(Timer tmr)
    {
        myTimer = tmr;
        timerName = tmr.TimerDescription;
        elapsedTimeString = stringifyElapsedTime(tmr.ElapsedTime);
        display = "block";
        button1Text = "STOP";
        button2Text = "START";
        updateTarget = UpdateTarget.TimerStopStart;
        IsTimerSet = true;
        ResumeTimer();
        StateHasChanged();
    }

    public void Tick()
    {
        if (myTimer.IsRunning)
        {
            myTimer.ElapsedTime++;
            if (!isPaused)
            {
                elapsedTimeString = stringifyElapsedTime(myTimer.ElapsedTime);
                StateHasChanged();
            }
        }
    }

    public bool IsTimerSet = false;

}
